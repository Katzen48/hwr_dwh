type Game {
    id: ID!
    name: String
    steam_id: String
    first_release_date: Date
    rating: Float
    genre_name: String
    facts(first: Int, page: Int, orderBy: FactsOrderByInput): [Facts]
    players(first: Int, fromDate: String!, toDate: String!): [PlayerCount] @cacheControl(maxAge: 1800, scope: PUBLIC)
    viewers(first: Int, fromDate: String!, toDate: String!): [ViewerCount] @cacheControl(maxAge: 1800, scope: PUBLIC)
}

type Stream {
    id: ID!
    user_id: String!
    started_at: DateTime
    ended_at: DateTime
    tag: String
    user_name: String!
    user_type: String
    user_broadcaster_type: String
    facts(first: Int, page: Int): [Facts] @cacheControl(maxAge: 1800, scope: PUBLIC)
}

type PlayerCount @cacheControl(maxAge: 1800, scope: PUBLIC) {
    players: Int!
    game_id: ID!
    created_at: DateTime
    game: [Game]
}

type ViewerCount @cacheControl(maxAge: 1800, scope: PUBLIC) {
    viewers: Int!
    game_id: ID!
    created_at: DateTime
    game: [Game]
}

type Facts {
    viewer_count: Int
    players_count: Int
    game_id: ID
    stream_id: ID
    created_at: DateTime
    game: [Game]
    stream: [Stream]
}

type Query {
    games(first: Int, page: Int, orderBy: GameOrderByInput, filter: GameFilterInput): [Game]
    game(id: ID!): [Game]
    streams(first: Int, page: Int, orderBy: StreamOrderByInput, filter: StreamFilterInput): [Stream]
    stream(id: ID!, filter: StreamFilterInput!): [Stream]
    facts(first: Int, page: Int, orderBy: FactsOrderByInput): [Facts] @cacheControl(maxAge: 1800, scope: PUBLIC)
    players(first: Int, page: Int, fromDate: DateTime!, toDate: DateTime!, orderBy: PlayerCountOrderByInput): [PlayerCount] @cacheControl(maxAge: 1800, scope: PUBLIC)
    viewers(first: Int, page: Int, fromDate: DateTime!, toDate: DateTime!, orderBy: ViewerCountOrderByInput): [ViewerCount] @cacheControl(maxAge: 1800, scope: PUBLIC)
}

input GameOrderByInput {
    id: Sort
    name: Sort
    steam_id: Sort
    first_release_date: Sort
    rating: Sort
    genre_name: Sort
}

input GameFilterInput {
    name: String
    steam_id: String
    first_release_date: Date
    rating: String
    genre_name: String
}

input StreamFilterInput {
    user_id: String
    started_at: DateTime
    ended_at: DateTime
    tag: String
    user_name: String
    user_type: String
    user_broadcaster_type: String
}

input StreamOrderByInput {
    id: Sort
    user_id: Sort
    started_at: Sort
    ended_at: Sort
    tag: Sort
    user_name: Sort
    user_type: Sort
    user_broadcaster_type: Sort
}

input FactsOrderByInput {
    game_id: Sort
    stream_id: Sort
    created_at: Sort
}

input PlayerCountOrderByInput {
    players: Sort
    game_id: Sort
    created_at: Sort
}

input ViewerCountOrderByInput {
    viewers: Sort
    game_id: Sort
    created_at: Sort
}

enum Sort {
    asc
    desc
}

scalar Date
scalar DateTime
scalar Time

directive @cacheControl(
    maxAge: Int,
    scope: CacheControlScope
) on OBJECT | FIELD_DEFINITION

enum CacheControlScope {
    PUBLIC
    PRIVATE
}